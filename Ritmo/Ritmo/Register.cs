using Ritmo.Database;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace Ritmo
{
    public class Register
    {
        private string _message;

        private string _sql;
        private bool _mailexists = false;
        private int _numberOfIterations = 50000; //set the number of iterations used in PBKDF2 to avoid Brute force

        //register for normal user
        public Register(string name, string mail, string password)
        {
            name = name.ToLower();

            //Check if the filled email exist
            _sql = $"SELECT email FROM Person WHERE email = '{mail}'";
            List<Dictionary<string, object>> EmailExist = DatabaseConnector.SelectQueryDB(_sql);
            
            if(EmailExist.Count > 0)//if the list contains more than one record, it means the email is already in use
            {
                _mailexists = true;
            }
            
            if (!_mailexists)//if the mail is not in use
            {
                if(password.Length >= 8 && password.Length <= 20)
                {
                    if (IsStrongPassword(password))//check if the password fullfill to the secure messures.
                    {
                        string HashedPassword = GenerateHash(password); //Generate a PBKDF2 password hashed

                        //insert new account in Person table
                        _sql = "INSERT INTO Person VALUES (" + "'" + mail + "', '" + HashedPassword + "', '" + name + "', " + 1 + ")";
                        DatabaseConnector.InsertQueryDB(_sql);

                        //get the autogenerated ID of the created account
                        _sql = $"SELECT personID FROM Person WHERE email = '{mail}'";
                        List<Dictionary<string, object>> personID = DatabaseConnector.SelectQueryDB(_sql);
                        int databasePersonID = int.Parse(personID.ElementAt(0).ElementAt(0).Value.ToString());

                        //insert a new record in consumer to make the person a consumer.
                        _sql = $"INSERT INTO Consumer VALUES ({databasePersonID})";
                        DatabaseConnector.InsertQueryDB(_sql);

                        _message = "Your account has been successfully created";
                    }
                    else
                    {
                        _message = "Password must contain: 1 upper, 1 lower, 1 special char and 1 number.";
                    }
                    
                }
                else
                {
                    _message = "Password must be minimum 8 and maximum 20 characters";
                }
                
            }
            else
            {
                _message = "This email already exists";
            }
            
        }


        //register for artist
        public Register(string mail)
        {
            //Check if the filled email exist
            _sql = "SELECT email FROM Person WHERE email = " + "'" + mail + "'";
            List<Dictionary<string, object>> EmailExist = DatabaseConnector.SelectQueryDB(_sql);

            if (EmailExist.Count > 0)//if the list contains more than one record, it means the email is already in use
            {
                _mailexists = true;
            }

            if (!_mailexists)//if the mail is not in use
            {
                _sql = "INSERT INTO Person VALUES (" + "'" + mail + "', '" + "', '"  + "', " + 2 + ")";
                DatabaseConnector.InsertQueryDB(_sql);
                _message = "Your account has been successfully created";
            } else
            {
                _message = "This email already exists";
            }
        }

        public override string ToString()
        {
            return _message;
        }

        private bool IsStrongPassword(string password)
        {
            //Check if the password contains atleast:
            // 1 uppercase
            // 1 lowcase
            // 1 special character
            // 1 number
            // 8 to 20 characteres

            Regex sampleRegex = new Regex(@"^(?=(.*\d){2})(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z\d]).{8,20}$");
            return sampleRegex.IsMatch(password);
        }

        public string GenerateHash(string password)
        {
            var salt = GenerateSalt();//generate a salt, a 24 array of random bytes

            var rfc2898 = new Rfc2898DeriveBytes(password, salt, _numberOfIterations);//PBKDF2 function to hash the password

            var saltAsString = Convert.ToBase64String(salt);//convert the salt to a string so it can be stored in teh database
            var hash = Encoding.Default.GetString(rfc2898.GetBytes(32)); //convert hash to string

            return _numberOfIterations + ":" + saltAsString + ":" + hash;
        }

        public static byte[] GenerateSalt()//generate a array of random bytes
        {
            var salt = new byte[24];

            var randomProvider = new RNGCryptoServiceProvider();
            randomProvider.GetBytes(salt);

            return salt;
        }


    }
}
